{"version":3,"sources":["js/factory/dataFactory.js"],"names":[],"mappings":"AAAA,CAAC,WAAW;IACR;;IAEA,YAAY,UAAU,CAAC,SAAS,iBAAiB,aAAa,UAAU;IACxE;SACK,OAAO;SACP,QAAQ,eAAe;;;IAG5B,SAAS,YAAY,OAAO,eAAe,WAAW,QAAQ,IAAI;;QAE9D,OAAO;YACH,SAAS;YACT,aAAa;YACb,SAAS;YACT,WAAW;YACX,WAAW;YACX,aAAa;YACb,YAAY;;;QAGhB,SAAS,QAAQ,UAAU;;YAEvB,MAAM,KAAK,cAAc,iBAAiB,cAAc,iBAAiB;iBACpE,KAAK,SAAS,MAAM;oBACjB,IAAI,KAAK,KAAK,SAAS,GAAG;wBACtB,OAAO,MAAM;wBACb;;oBAEJ,UAAU,KAAK;oBACf,QAAQ,IAAI;oBACZ,OAAO,QAAQ,2BAA2B;mBAC3C,SAAS,MAAM;oBACd,QAAQ,IAAI;oBACZ,OAAO,MAAM,KAAK,MAAM;;;iBAG3B,MAAM,SAAS,OAAO;;;;;QAK/B,SAAS,WAAW,QAAQ;YACxB,MAAM,KAAK,cAAc,iBAAiB,cAAc,oBAAoB;iBACvE,KAAK,SAAS,MAAM;oBACjB,UAAU,KAAK;oBACf,OAAO,QAAQ,4BAA4B;mBAC5C,SAAS,MAAM;oBACd,OAAO,MAAM,KAAK,MAAM;;;iBAG3B,MAAM,SAAS,OAAO;oBACnB,QAAQ,IAAI;;;;QAIxB,SAAS,YAAY,QAAQ;YACzB,IAAI,OAAO;;;YAGX,IAAI,MAAM,GAAG;;YAEb,MAAM,KAAK,cAAc,iBAAiB,cAAc,kBAAkB;iBACrE,KAAK,SAAS,MAAM;;oBAEjB,IAAI,QAAQ;;mBAEb,SAAS,MAAM;;oBAEd,OAAO,MAAM,KAAK,MAAM;;;iBAG3B,MAAM,SAAS,OAAO;;;YAG3B,OAAO,IAAI;;;QAGf,SAAS,QAAQ,QAAQ;YACrB,MAAM,KAAK,cAAc,iBAAiB,cAAc,iBAAiB;iBACpE,KAAK,SAAS,MAAM;;;oBAGjB,OAAO,QAAQ,2BAA2B;mBAC3C,SAAS,MAAM;;oBAEd,OAAO,MAAM,KAAK,MAAM;;;iBAG3B,MAAM,SAAS,OAAO;;;;;QAK/B,SAAS,UAAU,QAAQ;YACvB,IAAI,MAAM,GAAG;YACb,MAAM,KAAK,cAAc,iBAAiB,cAAc,gBAAgB;iBACnE,KAAK,SAAS,MAAM;oBACjB,IAAI,QAAQ;mBACb,SAAS,MAAM;oBACd,QAAQ,IAAI;oBACZ,OAAO,MAAM,KAAK,MAAM;;;iBAG3B,MAAM,SAAS,OAAO;;;;YAI3B,OAAO,IAAI;;;QAGf,SAAS,UAAU,QAAQ;YACvB,QAAQ,IAAI;YACZ,IAAI,MAAM,GAAG;YACb,MAAM,KAAK,cAAc,iBAAiB,cAAc,mBAAmB;iBACtE,KAAK,SAAS,MAAM;oBACjB,IAAI,QAAQ;oBACZ,QAAQ,IAAI;oBACZ,OAAO,QAAQ;;iBAElB,MAAM,SAAS,MAAM;oBAClB,QAAQ,IAAI;;YAEpB,OAAO,IAAI;;;QAGf,SAAS,YAAY,QAAQ;YACzB,QAAQ,IAAI;YACZ,IAAI,MAAM,GAAG;YACb,MAAM,KAAK,cAAc,iBAAiB,cAAc,qBAAqB;iBACxE,KAAK,SAAS,MAAM;oBACjB,IAAI,QAAQ;oBACZ,QAAQ,IAAI;oBACZ,OAAO,QAAQ;;iBAElB,MAAM,SAAS,MAAM;oBAClB,QAAQ,IAAI;;YAEpB,OAAO,IAAI;;;;KAIlB","sourcesContent":["(function() {\n    'use strict';\n\n    dataFactory.$inject = [\"$http\", \"mqttConstants\", \"$location\", \"toastr\", \"$q\"];\n    angular\n        .module('mqtt')\n        .factory('dataFactory', dataFactory)\n\n    /** @ngInject */\n    function dataFactory($http, mqttConstants, $location, toastr, $q) {\n\n        return {\n            connect: connect,\n            getMessages: getMessages,\n            publish: publish,\n            getTopics: getTopics,\n            subscribe: subscribe,\n            unsubscribe: unsubscribe,\n            disconnect: disconnect\n        }\n\n        function connect(customer) {\n\n            $http.post(mqttConstants.API_SERVER_URL + mqttConstants.API_CONNECT_URL, customer)\n                .then(function(data) {\n                    if (data.data.length < 1) {\n                        toastr.error('Login failed!');\n                        return;\n                    }\n                    $location.path('/topics');\n                    console.log(data);\n                    toastr.success('Successfully logged in!', data);\n                }, function(data) {\n                    console.log(data);\n                    toastr.error(data.data, 'Oops some error here!');\n\n                })\n                .catch(function(error) {\n\n                });\n        }\n\n        function disconnect(params) {\n            $http.post(mqttConstants.API_SERVER_URL + mqttConstants.API_DISCONNECT_URL, params)\n                .then(function(data) {\n                    $location.path('/');\n                    toastr.success('Successfully logged out!', data);\n                }, function(data) {\n                    toastr.error(data.data, 'Oops some error here!');\n\n                })\n                .catch(function(error) {\n                    console.log(error);\n                });\n        }\n\n        function getMessages(params) {\n            var data = {\n\n            }\n            var def = $q.defer();\n\n            $http.post(mqttConstants.API_SERVER_URL + mqttConstants.API_MESSAGES_URL, params)\n                .then(function(data) {\n                    // console.log(data);\n                    def.resolve(data);\n                    // toastr.success('Successfully logged in!', data);\n                }, function(data) {\n                    // console.log(data);\n                    toastr.error(data.data, 'Oops some error in getting messages!');\n\n                })\n                .catch(function(error) {\n\n                });\n            return def.promise;\n        }\n\n        function publish(params) {\n            $http.post(mqttConstants.API_SERVER_URL + mqttConstants.API_PUBLISH_URL, params)\n                .then(function(data) {\n                    // $location.path('/topics');\n                    // console.log(data);\n                    toastr.success('Successfully published!', data);\n                }, function(data) {\n                    // console.log(data);\n                    toastr.error(data.data, 'Oops some error here!');\n\n                })\n                .catch(function(error) {\n\n                });\n        }\n\n        function getTopics(params) {\n            var def = $q.defer();\n            $http.post(mqttConstants.API_SERVER_URL + mqttConstants.API_TOPICS_URL, params)\n                .then(function(data) {\n                    def.resolve(data);\n                }, function(data) {\n                    console.log(data);\n                    toastr.error(data.data, 'Oops some error here!');\n\n                })\n                .catch(function(error) {\n\n                });\n\n            return def.promise;\n        }\n\n        function subscribe(params) {\n            console.log(params);\n            var def = $q.defer();\n            $http.post(mqttConstants.API_SERVER_URL + mqttConstants.API_SUBSCRIBE_URL, params)\n                .then(function(data) {\n                    def.resolve(data);\n                    console.log(data);\n                    toastr.success('Successfully subscribed!')\n                })\n                .catch(function(data) {\n                    console.log(data);\n                });\n            return def.promise;\n        }\n\n        function unsubscribe(params) {\n            console.log(params);\n            var def = $q.defer();\n            $http.post(mqttConstants.API_SERVER_URL + mqttConstants.API_UNSUBSCRIBE_URL, params)\n                .then(function(data) {\n                    def.resolve(data);\n                    console.log(data);\n                    toastr.success('Successfully unsubscribed!')\n                })\n                .catch(function(data) {\n                    console.log(data);\n                });\n            return def.promise;\n        }\n    }\n\n}());"],"file":"../../../js/factory/dataFactory.js"}